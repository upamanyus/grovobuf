= Translation of struct type

Go struct definition looks pretty similar to the .gb file

= Marshalling/unmarshalling

Marshalling struct:
  for all fields in struct:
     marshal_fieldType(s.fieldName)

For primitive types (ints, chars), will have marshal_{primitive}.

Marshalling slice:
  special case for []byte marshalling.
  marshal_sliceFooStruct(s []FooStruct) {
    marshal(len(s))
    for i in range s {
      marshal(f[i])
    }
  }

Marshalling map:
  marshal_fooBarMap (s map[foo]bar) {
    marshal(len(s))
    for k, v := range(s) {
      marshal_foo(k)
      marshal_bar(k)
    }
  }

= Specs and proofs for Marshalling/unmarshalling

* Define a Coq record corresponding to the struct we want to marshal.
* Define an `own_Foo (ptr:loc) (s:FooCoq)` Iris predicate
* Define an `has_encoding_Foo (data:list u8) (s:FooCoq)` relation
* Prove spec
  { own_Foo ptr s } marshal_Foo(ptr) { ∃ b data, ret b; own_Foo ptr s ∗
                                       own_slice b data ∧ ⌜has_encoding_Foo data s⌝}

For map marshalling, we could have a GooseLang function called
`marshal_Map_generic` that takes in a `val` for marshalling individual keys and values.
We could prove a higher-order spec for ``marshal_Map_generic` that depends on
specs for the individual key/value marshal functions, specs which we should
hopefully be able to achieve automatically.
